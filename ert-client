#!/usr/bin/env python
import sys
import socket
import json
from os import getcwd
from os.path import join
from glob import glob
import time

class Connection(object):
    def __init__(self , port , host = "localhost"):
        self.socket = socket.socket( socket.AF_INET , socket.SOCK_STREAM)
        self.port = port
        self.host = host
        self.socket.setblocking(1)
        self.ready = True
        try:
            self.socket.connect((self.host , self.port))
        except socket.error:
            sys.exit("Failed to connect to port:%d at %s." % (port , host))


    def sendRecv(self , send):
        if not self.ready:
            raise Exception("try to reuse connection object")
        
        #print "to de sent to server: \n%s\n" % send
        self.socket.sendall( json.dumps(send) + "\n" )
        recv = self.socket.recv(1024)
        #print "\nreceived from server: %s\n" % recv

        self.ready = False
        try:
            return json.loads(recv)
        except:
            return ""


    @staticmethod
    def runCommand( cmd , port , host):
        conn = Connection( port , host )
        return conn.sendRecv( cmd )


#-----------------------------------------------------------------
# Get the working directory
workingDir = getcwd()

# Search for the input file *.einp
inputFileNames = glob(join(workingDir, "*.einp"))
if len(inputFileNames) == 0:
    pass
else:
    # Read the first input file and generata the message to the ERT server
    host = "localhost"
    port = 0
    ertSrcCaseName = "default"
    ertDstCaseName = "elcoDefault"
    modelName = ""
    geoId = -1
    perturbationId = -1
    simulationId = -1
    numberOfRuns = -1
    controls = dict()
    results = dict()
    reportStep = 1

    with open(inputFileNames[0], 'r') as inputFile:
        for line in inputFile:
            words = line.replace("\n","").replace("\r", "").split(":")
            if len(words) == 2:
                if words[0].strip().upper()   == "HOST":
                    host = words[1].strip()
                elif words[0].strip().upper() == "PORT":
                    port = int(words[1].strip())
                elif words[0].strip().upper() == "ERTSRCCASENAME":
                    ertSrcCaseName = words[1].strip()                
                elif words[0].strip().upper() == "ERTDSTCASENAME":
                    ertDstCaseName = words[1].strip()                
                elif words[0].strip().upper() == "REPORT_STEPS":
                    reportStep = int(words[1].strip())
                elif words[0].strip() == "ModelName":
                    modelName = words[1].strip()
                elif words[0].strip() == "GEO_ID":
                    geoId = int(words[1].strip())
                elif words[0].strip() == "PerturbationId":
                    perturbationId = int(words[1].strip())
                elif words[0].strip() == "SimulationId":
                    simulationId = int(words[1].strip())
                elif words[0].strip() == "NumberOfRuns":
                    numberOfRuns = int(words[1].strip())
                else:
                    # Is this a result?
                    if( words[1].strip() == "?"):
                        results[words[0].strip()] = "?"
                    else:
                        # Get the common control name
                        nameIndex = words[0].strip().rfind('_');
                        controlName = words[0].strip()[:nameIndex];
                        if controlName in controls:
                            controls[controlName].append(float(words[1].strip()))
                        else:
                            controls[controlName] = [float(words[1].strip())]


    # Try to initialize the simulations.
    # Create a socket to the server

    cmd = "INIT_SIMULATIONS"
    serverReq = [cmd, numberOfRuns,  ertSrcCaseName, ertDstCaseName]
    # Send the request and wait for server reply
    # Assume that the server only accepts one such initialization request per simulation batch
    serverReply = Connection.runCommand(serverReq , port , host )

    cmd = "ADD_SIMULATION"
    
    # Create the serto set the variables
    serverReq = [cmd, geoId, perturbationId, simulationId]
    varValReq = []
    for controlVar in controls.keys():
        varValReq.append( [ [ controlVar] + controls[controlVar]])

    serverReq = serverReq + varValReq

    # Send the request and wait for server reply
    serverReply = Connection.runCommand(serverReq , port , host )

    # Wait for the simulation to finish
    while 1>0:
        time.sleep(3)
        cmd = "STATUS"
        serverReq = [cmd]

        serverReply = Connection.runCommand(serverReq , port , host )
        if len(serverReply) > 0 and serverReply[0].strip().upper() == "COMPLETE":
            break
    
    # Get simulation results
    cmd = "GET_RESULT"
    for resultVar in results.keys():
        serverReq = [cmd, simulationId, reportStep, resultVar]

        serverReply = Connection.runCommand(serverReq , port , host )
        if serverReply[0].strip() == "OK":
            results[resultVar] = serverReply[1:]
    
    # Save server's reply
    with open(inputFileNames[0].replace(".einp", ".eout"), 'w') as outputFile:
        for resultsVar in results.keys():
            outputFile.write(resultsVar + " : ")
            for value in results[resultsVar]:
                outputFile.write("%15.7f " % value)
            outputFile.write("\n")
        
